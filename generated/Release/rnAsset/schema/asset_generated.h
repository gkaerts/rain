// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ASSET_RN_SCHEMA_H_
#define FLATBUFFERS_GENERATED_ASSET_RN_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace rn {
namespace schema {

struct Asset;
struct AssetBuilder;

struct Asset FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AssetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REFERENCES = 4,
    VT_ASSET_DATA = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *references() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REFERENCES);
  }
  const ::flatbuffers::Vector<uint8_t> *asset_data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_ASSET_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REFERENCES) &&
           verifier.VerifyVector(references()) &&
           verifier.VerifyVectorOfStrings(references()) &&
           VerifyOffset(verifier, VT_ASSET_DATA) &&
           verifier.VerifyVector(asset_data()) &&
           verifier.EndTable();
  }
};

struct AssetBuilder {
  typedef Asset Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_references(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> references) {
    fbb_.AddOffset(Asset::VT_REFERENCES, references);
  }
  void add_asset_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> asset_data) {
    fbb_.AddOffset(Asset::VT_ASSET_DATA, asset_data);
  }
  explicit AssetBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Asset> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Asset>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Asset> CreateAsset(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> references = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> asset_data = 0) {
  AssetBuilder builder_(_fbb);
  builder_.add_asset_data(asset_data);
  builder_.add_references(references);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Asset> CreateAssetDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *references = nullptr,
    const std::vector<uint8_t> *asset_data = nullptr) {
  auto references__ = references ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*references) : 0;
  auto asset_data__ = asset_data ? _fbb.CreateVector<uint8_t>(*asset_data) : 0;
  return rn::schema::CreateAsset(
      _fbb,
      references__,
      asset_data__);
}

inline const rn::schema::Asset *GetAsset(const void *buf) {
  return ::flatbuffers::GetRoot<rn::schema::Asset>(buf);
}

inline const rn::schema::Asset *GetSizePrefixedAsset(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<rn::schema::Asset>(buf);
}

inline const char *AssetIdentifier() {
  return "ASST";
}

inline bool AssetBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AssetIdentifier());
}

inline bool SizePrefixedAssetBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AssetIdentifier(), true);
}

inline bool VerifyAssetBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<rn::schema::Asset>(AssetIdentifier());
}

inline bool VerifySizePrefixedAssetBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<rn::schema::Asset>(AssetIdentifier());
}

inline void FinishAssetBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<rn::schema::Asset> root) {
  fbb.Finish(root, AssetIdentifier());
}

inline void FinishSizePrefixedAssetBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<rn::schema::Asset> root) {
  fbb.FinishSizePrefixed(root, AssetIdentifier());
}

}  // namespace schema
}  // namespace rn

#endif  // FLATBUFFERS_GENERATED_ASSET_RN_SCHEMA_H_
