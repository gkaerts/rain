include "data/schema/common.fbs";
include "data/schema/render/render_pass.fbs";

include "asset/schema/reference.fbs";

namespace rn.schema.render;


table Bytecode 
{
    d3d12_pc:           [ubyte];
    vulkan_pc:          [ubyte];
}

table VertexRasterPass 
{
    render_pass:        MaterialRenderPass;
    vertex_shader:      Bytecode            (required);
    pixel_shader:       Bytecode;
}

table MeshRasterPass
{
    render_pass:        MaterialRenderPass;
    amp_shader:         Bytecode;
    mesh_shader:        Bytecode            (required);        
    pixel_shader:       Bytecode;
}

table RayTracingPass 
{
    render_pass:        MaterialRenderPass;
    hit_group_name:     string              (required);
    closest_hit_export: string              (required);
    any_hit_export:     string;
}

enum TextureParameterDimension : uint
{
    _2D,
    _3D
}

table TextureParameter
{
    dimension:          TextureParameterDimension;
    default:            Reference   (required, reference_type: "texture");
}

table FloatVecParameter
{
    dimension:          uint;
    default:            [float];
    min:                [float];
    max:                [float];
}

table UintVecParameter
{
    dimension:          uint;
    default:            [uint];
    min:                [uint];
    max:                [uint];
}

table IntVecParameter
{
    dimension:          uint;
    default:            [int];
    min:                [int];
    max:                [int];
}

union ParameterType
{
    TextureParameter,
    FloatVecParameter,
    UintVecParameter,
    IntVecParameter
}

table Parameter
{
    name:               string          (required, key);
    offset_in_buffer:   uint;
    data:               ParameterType   (required);
}

table ParameterGroup
{
    name:               string          (required, key);
    parameters:         [Parameter]     (required);
}

table MaterialShader
{
    vertex_raster_passes:   [VertexRasterPass];
    mesh_raster_passes:     [MeshRasterPass];

    ray_tracing_library:    Bytecode;
    ray_tracing_passes:     [RayTracingPass];

    parameter_groups:       [ParameterGroup];
}

root_type           MaterialShader;
file_identifier     "MSHD";
file_extension      "material_shader";